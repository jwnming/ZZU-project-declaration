面试主要问题：
1、简述项目（保证业务表达清晰流畅、对自己负责的模块非常了解、其他的可用不是自己负责的语言推脱）
2、说说对分布式事务的了解：消息一致性方案是通过消息中间件保证上、下游应用数据操作的一致性。基本思路是将本地操作和发送消息放在一个事务中，保证	本地操作和消息发送要么两者都成功或者都失败。下游应用向消息系统订阅该消息，收到消息后执行相应操作。
3、控制spring的bean的加载顺序调整：@DependsOn控制bean加载顺序
4、类加载过程：类从被加载到JVM中开始，到卸载为止，整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。其中类加载过程包括		加载、验证、准备、解析和初始化五个阶段。
5、jvm对对象的回收：
	第一种：引用计数算法，是给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；在任何时刻计		数器的值为0的对象就是不可能再被使用的，也就是可被回收的对象。引用计数算法的效率很高，但是主流的JVM并没有选用这种算法来判定可回收对		象，因为它有一个致命的缺陷，那就是它无法解决对象之间相互循环引用的的问题，对于循环引用的对象它无法进行回收
	第二种：在主流的JVM实现中，都是通过可达性分析算法来判定对象是否存活的。可达性分析算法的基本思想是：通过一系列被称为"GC Roots"的对		象作为起始点，从这些节点开始向下搜索，搜索走过的路径称为引用链，当一个对象到GC Roots对象没有任何引用链相连，就认为GC Roots到这个对		象是不可达的，判定此对象为不可用对象，可以被回收
	在Java中，可作为GC Roots的对象包括下面几种：
       		1)、虚拟机栈中引用的对象；
       		2)、方法区中类静态属性引用的对象；
       		3)、方法区中常量引用的对象；
       		4)、本地方法栈中Native方法引用的对象。
6、concurrent包下的一些类使用，一定要了解CAS
7、springboot的启动服务的简述
8、多线程的了解情况，要了解常见的线程池，面试题中大部分都有线程池有关的
9、说说目前公司所使用的服务架构？dubbo + zookeeper，那说说dubbo和spring cloud的区别
10、说说对NIO的了解，以及用到的框架，例如Netty时
11、Redis的理解、其存值方式及实现
12、索引类型及结构类型(唯一、普通、列、主键；BTree、RTree、Hash)，了解SQL优化的是加分项
13、反射的应用场景
14、说说单例模式的设计，例如饱汉式、饿汉式、懒汉式、双重检查锁、枚举、CAS算法等实现的单例，我当时就说了六种




我所遇到的1-3年java开发工程师面试常见的技术：多线程、分布式、NIO、spring cloud、spring boot、Dubbo + zookeeper
















